service: admin-notification-service
useDotenv: true
frameworkVersion: "3"

plugins:
  - serverless-bundle
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 2048
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.region.${sls:stage}}
  environment:
    NOTIFICATION_TEMPLATE_TABLE: ${self:custom.NotificationTemplateTable}
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
    S3_BUCKET_NAME: ${self:custom.s3BucketName.${sls:stage}}
    REGION: ${self:provider.region}
    ACCESS_CONTROL_ALLOW_ORIGIN: ${self:custom.accessControlAllowOrigin.${sls:stage}}

  iam:
    role:
      statements:
        - ${file(iam/NotificationTemplateTableIAM.yml):NotificationTemplateTableIAM}
        - ${file(iam/InvokeLambdaIAM.yml):InvokeLambdaIAM}

resources:
  Resources:
    NotificationTemplateTable: ${file(resources/NotificationTemplate.yml):NotificationTemplateTable}

functions:
  savetemplate:
    handler: src/handlers/notificationTemplates/create.handler
    events:
      - http:
          path: /notification-saveTemplate
          method: POST
          cors: true
  updateTemplate:
    handler: src/handlers/notificationTemplates/update.handler
    events:
      - http:
          path: /notification-update
          method: put
          cors: true
  deleteTemplate:
    handler: src/handlers/notificationTemplates/delete.handler
    events:
      - http:
          path: /notification-delete
          method: delete
          cors: true
  listTemplate:
    handler: src/handlers/notificationTemplates/list.handler
    events:
      - http:
          path: /notification-list
          method: get
          cors: true
  singleTemplate:
    handler: src/handlers/notificationTemplates/getOne.handler
    events:
      - http:
          path: /notification-single
          method: get
          cors: true

custom:
  NotificationTemplateTable: "NotificationTemplateTable-${sls:stage}"

  s3BucketName:
    dev: sagoon-relationship-dev
    staging: sagoon-staging
    prod: sagoon-prod

  domains:
    dev: dev.sagoonlite.com
    testing: testing.sagoon.com
    staging: staging.sagoon.com
    prod: prod.sagoon.com

  region:
    dev: eu-central-1
    testing: ap-southeast-1
    staging: ap-southeast-1
    prod: ap-south-1

  accessControlAllowOrigin:
    dev: "*"
    testing: "*"
    staging: "*.sagoon.com"
    prod: "*.sagoon.com"

  customDomain:
    domainName: ${self:custom.domains.${sls:stage}}
    basePath: "templateAdmin"
    stage: ${sls:stage}
    createRoute53Record: true
    endpointType: "edge"
