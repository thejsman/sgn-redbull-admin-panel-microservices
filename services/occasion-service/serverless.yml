service: admin-occasion-service
useDotenv: true
frameworkVersion: "3"

plugins:
  - serverless-bundle
  - serverless-domain-manager
provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.region.${sls:stage}}
  environment:
    OCCASION_ICON_TABLE: ${self:custom.OccasionIconTable}
    OCCASION_TEMPLATES_TABLE: ${self:custom.OccasionTemplatesTable}
    OCCASION_CARD_TABLE: ${self:custom.OccasionCardTable}
    OCCASION_ICON_FOLDER: ${self:custom.bucket.${sls:stage}}/${env:upload_folder_${sls:stage}}
    LOTTIE_BACKGROUND_IMAGE_FOLDER: ${self:custom.bucket.${sls:stage}}/home-screen/lottie
    CDN_BUCKET_URL: ${env:s3_cdn_for_${sls:stage}}
    ACCESS_CONTROL_ALLOW_ORIGIN: ${self:custom.accessControlAllowOrigin.${sls:stage}}
    OCCASION_ICONS_CLONED_FOLDER: ${env:upload_folder_${self:custom.dataTransferredFromTo.${sls:stage}}}
    CDN_BUCKET_URL_UPPER_STAGE: ${env:s3_cdn_for_${self:custom.dataTransferredFromTo.${sls:stage}}}
    BUCKET_TO_BE_IN_CLONE_UPPER_STAGE: ${self:custom.bucket.${self:custom.dataTransferredFromTo.${sls:stage}}}
    REGION_IN_WHICH_TO_BE_COPIED: ${self:custom.region.${self:custom.dataTransferredFromTo.${sls:stage}}}
    UPPER_STAGE_OCCASION_CARD_TABLE: ${self:custom.UpperStageOccasionCardTable}
  iam:
    role:
      statements:
        - ${file(iam/OccasionCardIAM.yml):OccasionCardIAM}
        - ${file(iam/OccasionIconIAM.yml):OccasionIconIAM}
        - ${file(iam/OccasionTemplatesIAM.yml):OccasionTemplatesIAM}
        - ${file(iam/UploadImageIAM.yml):UploadImageIAM}
        - ${file(iam/TransferToOccasionCardIAM.yml):TransferToOccasionCardIAM}
resources:
  Resources:
    OccasionCardTable: ${file(resources/OccasionCardTable.yml):OccasionCardTable}
    OccasionIconTable: ${file(resources/OccasionIconTable.yml):OccasionIconTable}
    OccasionTemplatesTable: ${file(resources/OccasionTemplatesTable.yml):OccasionTemplatesTable}

functions:
  createOccasionCard:
    handler: src/handlers/CreateOccasionCard.handler
    events:
      - http:
          method: POST
          path: /create-card
          cors: true
  deleteOccasionCard:
    handler: src/handlers/DeleteOccasionCard.handler
    events:
      - http:
          method: DELETE
          path: /delete-card
          cors: true
  getOccasionCard:
    handler: src/handlers/GetOccasionCard.handler
    events:
      - http:
          method: GET
          path: /card/{cardGroup}/{cardName}
          cors: true
  getOccasionCards:
    handler: src/handlers/GetOccasionCards.handler
    events:
      - http:
          method: GET
          path: /cards/{occasionName}
          cors: true
  getOccasions:
    handler: src/handlers/GetOccasions.handler
    events:
      - http:
          method: GET
          path: /occasion
          cors: true
  getPredefinedOccasions:
    handler: src/handlers/GetPredefinedOccasions.handler
    events:
      - http:
          method: GET
          path: /predefinedOccasion
          cors: true
  cloneOccasions:
    handler: src/handlers/SyncOccasionToUpperRegion.handler
    events:
      - http:
          method: POST
          path: /cloneOccasionCard
          cors: true
  AddOccasion:
    handler: src/handlers/AddOccasion.handler
    events:
      - http:
          method: PATCH
          path: /occasion
          cors: true
  GetOccasionByName:
    handler: src/handlers/GetOccasionByName.handler
    events:
      - http:
          method: GET
          path: /occasion/{occasionName}
          cors: true
  GetPredefinedOccasionByName:
    handler: src/handlers/GetPredefinedOccasionByName.handler
    events:
      - http:
          method: GET
          path: /predefinedOccasion/{occasionName}
          cors: true
  DeleteOccasion:
    handler: src/handlers/DeleteOccasion.handler
    events:
      - http:
          method: DELETE
          path: /occasion/{occasionName}
          cors: true
  DeletePredefinedOccasion:
    handler: src/handlers/DeletePredefinedOccasion.handler
    events:
      - http:
          method: DELETE
          path: /predefinedOccasion/{occasionName}
          cors: true
  getTemplates:
    handler: src/handlers/GetTemplates.handler
    events:
      - http:
          method: GET
          path: /templates
          cors: true
  addTemplate:
    handler: src/handlers/AddTemplate.handler
    events:
      - http:
          method: POST
          path: /template
          cors: true
  getTemplateByName:
    handler: src/handlers/GetTemplateByName.handler
    events:
      - http:
          method: GET
          path: /template/{occasionName}/{templateName}
          cors: true
  deleteTemplate:
    handler: src/handlers/DeleteTemplate.handler
    events:
      - http:
          method: DELETE
          path: /template/{occasionName}/{templateName}
          cors: true
  getTemplatesByOccasion:
    handler: src/handlers/GetTemplatesByOccasion.handler
    events:
      - http:
          method: GET
          path: /templates/{templateName}
          cors: true
custom:
  OccasionIconTable: "OccasionIconTable-${sls:stage}"
  OccasionTemplatesTable: "OccasionTemplatesTable-${sls:stage}"
  OccasionCardTable: "OccasionCardsTable-${sls:stage}"
  UpperStageOccasionCardTable: OccasionCardsTable-${self:custom.dataTransferredFromTo.${sls:stage}}
  S3Bucket: "sagoon-2022-dev"

  domains:
    dev: dev.sagoonlite.com
    testing: testing.sagoon.com
    staging: staging.sagoon.com
    prod: prod.sagoon.com

  region:
    dev: eu-central-1
    testing: ap-southeast-1
    staging: ap-southeast-1
    prod: ap-south-1

  bucket:
    dev: sagoon-2022-dev
    testing: sagoon-staging
    staging: sagoon-staging
    prod: sagoon-prod

  accessControlAllowOrigin:
    dev: "*"
    testing: "*"
    staging: "*.sagoon.com"
    prod: "*"

  dataTransferredFromTo:
    dev: staging
    staging: prod
    prod: staging

  customDomain:
    domainName: ${self:custom.domains.${sls:stage}}
    certificateName: ${self:custom.domains.${sls:stage}}
    basePath: admin-occasion
    stage: ${sls:stage}
    createRoute53Record: true
    endpointType: edge
